name: Auto Deploy to Vultr

on:
  # Deploy on every push to main
  push:
    branches: [ main ]
  
  # Also deploy every night at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual deployment
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Deploy to Server 2
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "üöÄ Deploying to Server 2 (app.rv2class.com)..."
        
        if [ -z "$SERVER_IP" ]; then
          echo "‚ùå ERROR: SERVER_IP secret is not set!"
          exit 1
        fi
        
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "‚ùå ERROR: SSH_PRIVATE_KEY secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ Secrets verified. Deploying to $SERVER_IP"
        
        # Create .ssh directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Add server to known hosts to avoid prompts
        ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Give server a moment before connecting
        sleep 2
        
        # Use SSH_PRIVATE_KEY as password with sshpass (disable pseudo-terminal allocation)
        export SSHPASS="$SSH_PRIVATE_KEY"
        sshpass -e ssh -T -o StrictHostKeyChecking=no -o ServerAliveInterval=60 root@$SERVER_IP << 'ENDSSH'
        # Exit on error, but allow some commands to fail gracefully
        set -e
        
        echo "üìÇ Navigating to app directory..."
        cd /var/www/rv2class || { echo "‚ùå Failed to navigate to app directory"; exit 1; }
        
        echo "üì• Pulling latest code..."
        git fetch origin || { echo "‚ùå Failed to fetch from origin"; exit 1; }
        
        # Store node_modules to survive reset
        if [ -d "jitsi-custom/jitsi-meet/node_modules" ]; then
          echo "  ‚Üí Backing up node_modules..."
          mv jitsi-custom/jitsi-meet/node_modules /tmp/jitsi-node-modules-backup 2>/dev/null || true
        fi
        
        git reset --hard origin/main || { echo "‚ùå Failed to reset to origin/main"; exit 1; }
        
        # Restore node_modules
        if [ -d "/tmp/jitsi-node-modules-backup" ]; then
          echo "  ‚Üí Restoring node_modules..."
          mv /tmp/jitsi-node-modules-backup jitsi-custom/jitsi-meet/node_modules 2>/dev/null || true
        fi
        
        echo "üì¶ Building custom Jitsi with homework system..."
        cd jitsi-custom/jitsi-meet || { echo "‚ùå Failed to navigate to jitsi-meet directory"; exit 1; }
        
        echo "  ‚Üí Installing dependencies..."
        npm install || { echo "‚ùå npm install failed"; exit 1; }
        
        echo "  ‚Üí Building application..."
        make || { echo "‚ùå Build failed"; exit 1; }
        
        echo "  ‚Üí Deploying built files to /usr/share/jitsi-meet/"
        # Copy each directory/file type separately to handle missing files gracefully
        [ -d "css" ] && cp -r css /usr/share/jitsi-meet/ && echo "    ‚úÖ CSS deployed" || echo "    ‚ö†Ô∏è  CSS not found"
        [ -d "libs" ] && cp -r libs /usr/share/jitsi-meet/ && echo "    ‚úÖ Libs deployed" || echo "    ‚ö†Ô∏è  Libs not found"
        [ -d "sounds" ] && cp -r sounds /usr/share/jitsi-meet/ 2>/dev/null || true
        [ -d "images" ] && cp -r images /usr/share/jitsi-meet/ 2>/dev/null || true
        [ -d "fonts" ] && cp -r fonts /usr/share/jitsi-meet/ 2>/dev/null || true
        [ -d "static" ] && cp -r static /usr/share/jitsi-meet/ 2>/dev/null || true
        [ -d "lang" ] && cp -r lang /usr/share/jitsi-meet/ 2>/dev/null || true
        cp *.html /usr/share/jitsi-meet/ 2>/dev/null || true
        cp *.js /usr/share/jitsi-meet/ 2>/dev/null || true
        
        cd /var/www/rv2class || { echo "‚ùå Failed to return to app directory"; exit 1; }
        
        echo "üìã Deploying Jitsi config files..."
        if [ -f "jitsi-custom/jitsi-meet/config.js" ]; then
          echo "  ‚Üí Copying config.js to /etc/jitsi/meet/"
          cp jitsi-custom/jitsi-meet/config.js /etc/jitsi/meet/app.rv2class.com-config.js
        fi
        
        if [ -f "jitsi-custom/jitsi-meet/interface_config.js" ]; then
          echo "  ‚Üí Copying interface_config.js to /usr/share/jitsi-meet/"
          cp jitsi-custom/jitsi-meet/interface_config.js /usr/share/jitsi-meet/interface_config.js
        fi
        
        echo "üìÑ Deploying custom HTML pages..."
        if [ -d "jitsi-custom" ]; then
          cp jitsi-custom/*.html /usr/share/jitsi-meet/ 2>/dev/null || echo "  ‚ö†Ô∏è  No custom HTML files found"
        fi
        
        echo "‚ôªÔ∏è  Restarting all services..."
        echo "  ‚Üí Restarting Jitsi services..."
        systemctl restart prosody jicofo jitsi-videobridge2 2>/dev/null || echo "  ‚ö†Ô∏è  Jitsi services not found (skip if not installed)"
        
        echo "  ‚Üí Reloading Nginx..."
        systemctl reload nginx
        
        echo "‚úÖ Deployment complete!"
        echo ""
        echo "üìä Service Status:"
        systemctl status prosody jicofo jitsi-videobridge2 nginx --no-pager 2>/dev/null || echo "Services status check skipped"
        ENDSSH
    
    - name: Deployment Status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
