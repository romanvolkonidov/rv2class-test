name: Auto Deploy to Vultr

on:
  # Deploy on every push to main
  push:
    branches: [ main ]
  
  # Also deploy every night at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual deployment
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to Vultr Server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "üöÄ Deploying to production server..."
        
        # Debug: Check if secrets are set
        if [ -z "$SERVER_IP" ]; then
          echo "‚ùå ERROR: SERVER_IP secret is not set!"
          echo "Please add SERVER_IP=108.61.245.179 to GitHub Secrets"
          exit 1
        fi
        
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "‚ùå ERROR: SSH_PRIVATE_KEY secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ Secrets verified. Deploying to: $SERVER_IP"
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts
        ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts 2>/dev/null
        
        # SSH and deploy using key authentication
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no "root@$SERVER_IP" << 'ENDSSH'
        set -e
        
        echo "üìÇ Navigating to app directory..."
        cd /var/www/rv2class
        
        echo "üì• Pulling latest code..."
        git fetch origin
        
        # Store node_modules to survive reset
        if [ -d "jitsi-custom/jitsi-meet/node_modules" ]; then
          echo "  ‚Üí Backing up node_modules..."
          mv jitsi-custom/jitsi-meet/node_modules /tmp/jitsi-node-modules-backup
        fi
        
        git reset --hard origin/main
        
        # Restore node_modules
        if [ -d "/tmp/jitsi-node-modules-backup" ]; then
          echo "  ‚Üí Restoring node_modules..."
          mv /tmp/jitsi-node-modules-backup jitsi-custom/jitsi-meet/node_modules
        fi
        
        echo "üèóÔ∏è  Building Jitsi Meet..."
        cd jitsi-custom/jitsi-meet
        
        # Only install if node_modules missing or package.json changed
        if [ ! -d "node_modules" ] || [ "$(git diff HEAD@{1} HEAD -- package.json 2>/dev/null)" ]; then
          echo "  ‚Üí Installing Jitsi dependencies..."
          npm install --legacy-peer-deps
        else
          echo "  ‚úÖ Dependencies already installed, skipping..."
        fi
        
        echo "  ‚Üí Building Jitsi Meet bundle (this may take 10-15 minutes)..."
        # Start build in background with nohup to survive SSH disconnects
        nohup make > /tmp/jitsi-build.log 2>&1 &
        BUILD_PID=$!
        
        echo "  ‚Üí Build started (PID: $BUILD_PID). Monitoring progress..."
        
        # Wait for build with timeout and progress monitoring
        for i in {1..1800}; do
          if ! ps -p $BUILD_PID > /dev/null 2>&1; then
            if [ -f "libs/app.bundle.min.js" ]; then
              echo "  ‚úÖ Build completed successfully!"
              break
            else
              echo "  ‚ùå Build process died but no output files found"
              tail -50 /tmp/jitsi-build.log
              exit 1
            fi
          fi
          
          # Show progress every 30 seconds
          if [ $((i % 30)) -eq 0 ]; then
            echo "  ‚è±  Still building... ($i seconds elapsed)"
            tail -2 /tmp/jitsi-build.log 2>/dev/null | grep -E "webpack|Progress|building" || true
          fi
          
          sleep 1
        done
        
        # If we hit timeout, check if build is still running
        if ps -p $BUILD_PID > /dev/null 2>&1; then
          echo "  ‚è±  Build exceeded timeout but still running. Checking output..."
          if [ -f "libs/app.bundle.min.js" ]; then
            echo "  ‚úÖ Build files found, continuing deployment"
          else
            echo "  ‚ö†Ô∏è  Build still in progress. Files will be available on next deploy."
            echo "  üí° Tip: SSH into server and check: tail -f /tmp/jitsi-build.log"
          fi
        fi
        
        echo "  ‚Üí Copying built files to /usr/share/jitsi-meet/"
        cp -r css libs sounds images fonts static lang *.html *.js /usr/share/jitsi-meet/ 2>/dev/null || true
        
        cd /var/www/rv2class
        
        echo "üìã Deploying Jitsi config files..."
        if [ -f "jitsi-custom/jitsi-meet/config.js" ]; then
          echo "  ‚Üí Copying config.js to /etc/jitsi/meet/"
          cp jitsi-custom/jitsi-meet/config.js /etc/jitsi/meet/app.rv2class.com-config.js
        fi
        
        if [ -f "jitsi-custom/jitsi-meet/interface_config.js" ]; then
          echo "  ‚Üí Copying interface_config.js to /usr/share/jitsi-meet/"
          cp jitsi-custom/jitsi-meet/interface_config.js /usr/share/jitsi-meet/interface_config.js
        fi
        
        echo "üìÑ Deploying custom HTML pages..."
        if [ -d "jitsi-custom" ]; then
          cp jitsi-custom/*.html /usr/share/jitsi-meet/ 2>/dev/null || echo "  ‚ö†Ô∏è  No custom HTML files found"
        fi
        
        echo "‚ôªÔ∏è  Restarting all services..."
        echo "  ‚Üí Restarting Jitsi services..."
        systemctl restart prosody jicofo jitsi-videobridge2 2>/dev/null || echo "  ‚ö†Ô∏è  Jitsi services not found (skip if not installed)"
        
        echo "  ‚Üí Reloading Nginx..."
        systemctl reload nginx
        
        echo "‚úÖ Deployment complete!"
        echo ""
        echo "üìä Service Status:"
        systemctl status prosody jicofo jitsi-videobridge2 nginx --no-pager 2>/dev/null || echo "Services status check skipped"
        ENDSSH
    
    - name: Deployment Status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
